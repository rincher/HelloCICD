name: Build & Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1           # 사용할 AWS 리전
  ECR_REPOSITORY: helloapp        # ECR 리포지토리 이름
  ECS_CLUSTER: hellocluster       # ECS 클러스터 이름
  ECS_SERVICE: helloservice       # ECS 서비스 이름
  ECS_TASK_DEFINITION: hellotask-revision1.json  # ECS에 등록된 Task Definition 이름(또는 ARN)
  CONTAINER_NAME: helloapp        # Task Definition 내 컨테이너 이름

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) JDK 설치 및 Gradle 캐시
      - name: Set up JDK 17 and cache Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # 3) AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 4) ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 5) 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 6) Docker 이미지 빌드·태그·푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG:    ${{ github.sha }}
          SERVICE_PATH: .
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG $SERVICE_PATH
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 7) 새 이미지로 Task Definition 렌더링
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
        
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
