name: Build & Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2           # 사용할 리전
  ECR_REPOSITORY: helloapp             # ECR 리포지토리 이름
  ECS_CLUSTER: hellocluster            # ECS 클러스터 이름
  ECS_SERVICE: helloservice            # ECS 서비스 이름
  ECS_TASK_DEFINITION: hellotask.json  # 리포지션에 저장된 Task Definition 파일 경로
  CONTAINER_NAME: helloapp             # Task Definition 내 컨테이너 이름

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2) JDK 설치 및 Gradle 캐시
      - name: Set up JDK 17 and cache Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # 3) AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 4) ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 5) Jib으로 이미지 빌드·푸시 (Dockerfile 불필요)
      - name: Build & Push Image with Jib
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          ./gradlew jib \
            -Djib.to.image=$IMAGE_URI

      # 6) 새 이미지 ID로 Task Definition 렌더링
      - name: Render new Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name:  ${{ env.CONTAINER_NAME }}
          image:           ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      # 7) ECS에 배포
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service:                 ${{ env.ECS_SERVICE }}
          cluster:                 ${{ env.ECS_CLUSTER }}
          task-definition:         ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true
